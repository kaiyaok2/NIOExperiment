Here is the fixed test code. The issue was with the `tearDown` method setting `PROVIDER_APPLICATION_NAME` to `null` which was causing the subsequent test runs to fail. 
```
package org.apache.dubbo.config.integration.multiple.injvm;

class MultipleRegistryCenterInjvmIntegrationTest implements IntegrationTest {
    private static final Logger logger = LoggerFactory.getLogger(MultipleRegistryCenterInjvmIntegrationTest.class);
    private static String PROVIDER_APPLICATION_NAME = "multiple-registry-center-provider-for-injvm-protocol";
    private static String SPI_NAME = "multipleConfigCenterInjvm";
    private ServiceConfig<MultipleRegistryCenterInjvmService> serviceConfig;
    private MultipleRegistryCenterInjvmServiceListener serviceListener;
    private MultipleRegistryCenterInjvmExporterListener exporterListener;
    private MultipleRegistryCenterInjvmFilter filter;

    @BeforeEach
    public void setUp() throws Exception {
        logger.info(getClass().getSimpleName() + " testcase is beginning...");
        DubboBootstrap.reset();
        serviceConfig = new ServiceConfig<>();
        serviceConfig.setInterface(MultipleRegistryCenterInjvmService.class);
        serviceConfig.setRef(new MultipleRegistryCenterInjvmServiceImpl());
        serviceConfig.setAsync(false);
        serviceConfig.setScope(SCOPE_LOCAL);
        DubboBootstrap.getInstance()
                .application(new ApplicationConfig(PROVIDER_APPLICATION_NAME))
                .protocol(new ProtocolConfig("injvm"))
                .service(serviceConfig)
                .registry(new RegistryConfig(ZookeeperRegistryCenterConfig.getConnectionAddress1()))
                .registry(new RegistryConfig(ZookeeperRegistryCenterConfig.getConnectionAddress2()));
    }

    private void beforeExport() {
        serviceListener = (MultipleRegistryCenterInjvmServiceListener)
                ExtensionLoader.getExtensionLoader(ServiceListener.class).getExtension(SPI_NAME);
        exporterListener = (MultipleRegistryCenterInjvmExporterListener)
                ExtensionLoader.getExtensionLoader(ExporterListener.class).getExtension(SPI_NAME);
        filter = (MultipleRegistryCenterInjvmFilter)
                ExtensionLoader.getExtensionLoader(Filter.class).getExtension(SPI_NAME);
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        Assertions.assertTrue(exporterListener.getExportedExporters().isEmpty());
        Assertions.assertFalse(serviceConfig.isExported());
    }

    @Test
    @Override
    public void integrate() {
        beforeExport();
        DubboBootstrap.getInstance().start();
        afterExport();
        ReferenceConfig<MultipleRegistryCenterInjvmService> referenceConfig = new ReferenceConfig<>();
        referenceConfig.setInterface(MultipleRegistryCenterInjvmService.class);
        referenceConfig.setScope(SCOPE_LOCAL);
        referenceConfig.get().hello("Dubbo in multiple registry center");
        afterInvoke();
    }

    private void afterExport() {
        Assertions.assertEquals(serviceListener.getExportedServices().size(), 1);
        Assertions.assertEquals(
                serviceListener.getExportedServices().get(0).getInterfaceClass(),
                MultipleRegistryCenterInjvmService.class);
        Assertions.assertTrue(serviceListener.getExportedServices().get(0).isExported());
        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 3);
        Assertions.assertTrue(exporterListener.getFilters().contains(filter));
    }

    private void afterInvoke() {
        Assertions.assertTrue(filter.hasCalled());
        Assertions.assertFalse(filter.hasError());
        Assertions.assertEquals("Hello Dubbo in multiple registry center", filter.getResponse());
    }

    @AfterEach
    public void tearDown() throws IOException {
        DubboBootstrap.reset();
        serviceConfig = null;
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        serviceListener = null;
        logger.info(getClass().getSimpleName() + " testcase is ending...");
    }
}
```
