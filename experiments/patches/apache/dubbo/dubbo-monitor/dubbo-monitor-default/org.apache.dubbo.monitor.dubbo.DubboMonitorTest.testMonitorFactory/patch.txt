The issue is with the port 17979 which is already in use. You can use any free port instead of hardcoded port 17979. You can find a free port using java.net.ServerSocket. Here is the modified test:

```java
class DubboMonitorTest {
    private final Invoker<MonitorService> monitorInvoker = new Invoker<MonitorService>() {
        @Override
        public Class<MonitorService> getInterface() {
            return MonitorService.class;
        }
        public URL getUrl() {
            return URL.valueOf("dubbo://127.0.0.1:7070?interval=1000");
        }
        @Override
        public boolean isAvailable() {
            return false;
        }
        @Override
        public Result invoke(Invocation invocation) throws RpcException {
            return null;
        }
        @Override
        public void destroy() {}
    };
    private volatile URL lastStatistics;
    private final MonitorService monitorService = new MonitorService() {
        public void collect(URL statistics) {
            DubboMonitorTest.this.lastStatistics = statistics;
        }
        public List<URL> lookup(URL query) {
            return Arrays.asList(DubboMonitorTest.this.lastStatistics);
        }
    };
    @Test
    void testMonitorFactory() throws IOException {
        int port;
        try (ServerSocket socket = new ServerSocket(0)) {
            port = socket.getLocalPort();
            socket.close();
        }
        MockMonitorService monitorService = new MockMonitorService();
        URL statistics = new URLBuilder(DUBBO_PROTOCOL, "10.20.153.10", 0)
                .addParameter(APPLICATION_KEY, "morgan")
                .addParameter(INTERFACE_KEY, "MemberService")
                .addParameter(METHOD_KEY, "findPerson")
                .addParameter(CONSUMER, "10.20.153.11")
                .addParameter(SUCCESS_KEY, 1)
                .addParameter(FAILURE_KEY, 0)
                .addParameter(ELAPSED_KEY, 3)
                .addParameter(MAX_ELAPSED_KEY, 3)
                .addParameter(CONCURRENT_KEY, 1)
                .addParameter(MAX_CONCURRENT_KEY, 1)
                .build();
        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
        ProxyFactory proxyFactory =
                ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
        MonitorFactory monitorFactory =
                ExtensionLoader.getExtensionLoader(MonitorFactory.class).getAdaptiveExtension();
        Exporter<MonitorService> exporter = protocol.export(proxyFactory.getInvoker(
                monitorService,
                MonitorService.class,
                URL.valueOf("dubbo://127.0.0.1:" + port + "/" + MonitorService.class.getName())));
        try {
            Monitor monitor = null;
            long start = System.currentTimeMillis();
            while (System.currentTimeMillis() - start < 60000) {
                monitor = monitorFactory.getMonitor(URL.valueOf("dubbo://127.0.0.1:" + port + "?interval=10"));
                if (monitor == null) {
                    continue;
                }
                try {
                    monitor.collect(statistics.toSerializableURL());
                    await().atLeast(10, TimeUnit.MILLISECONDS)
                            .atMost(60, TimeUnit.SECONDS)
                            .until(() -> monitorService.getStatistics().stream()
                                    .anyMatch(s -> s.getParameter(SUCCESS_KEY, 0) == 1));
                    List<URL> statisticsUrls = monitorService.getStatistics();
                    Optional<URL> url = statisticsUrls.stream()
                            .filter(s -> s.getParameter(SUCCESS_KEY, 0) == 1)
                            .findFirst();
                    Assertions.assertTrue(url.isPresent());
                    Assertions.assertEquals(1, url.get().getParameter(SUCCESS_KEY, 0));
                    Assertions.assertEquals(3, url.get().getParameter(ELAPSED_KEY, 0));
                } finally {
                    monitor.destroy();
                }
                break;
            }
            Assertions.assertNotNull(monitor);
        } finally {
            exporter.unexport();
        }
    }
}
```