```java
package org.apache.hadoop.yarn.sls.scheduler;

public class TestTaskRunner {
  private TaskRunner runner;
  @Before
  public void setUp() {
    runner = new TaskRunner();
    runner.setQueueSize(5);
  }
  @After
  public void cleanUp() throws InterruptedException {
    runner.stop();
  }
  public static class SingleTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public SingleTask(long startTime) {
      super.init(startTime);
    }
    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
      latch.countDown();
    }
    @Override
    public void middleStep() {
      Assert.fail();
    }
    @Override
    public void lastStep() {
      Assert.fail();
    }
  }
  @Test
  public void testSingleTask() throws Exception {
    SingleTask.latch = new CountDownLatch(1);
    SingleTask.first = false;
    runner.start();
    runner.schedule(new SingleTask(0));
    SingleTask.latch.await(5000, TimeUnit.MILLISECONDS);
    Assert.assertTrue(SingleTask.first);
  }
  public static class DualTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static boolean last;
    public DualTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }
    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }
    @Override
    public void middleStep() {
      Assert.fail();
    }
    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }
  public static class TriTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static boolean middle;
    public static boolean last;
    public TriTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }
    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }
    @Override
    public void middleStep() {
      if (middle) {
        Assert.fail();
      }
      middle = true;
    }
    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }
  public static class MultiTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static int middle;
    public static boolean last;
    public MultiTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }
    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }
    @Override
    public void middleStep() {
      middle++;
    }
    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }
  public static class PreStartTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public PreStartTask(long startTime) {
      super.init(startTime);
    }
    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
      latch.countDown();
    }
    @Override
    public void middleStep() {
    }
    @Override
    public void lastStep() {
    }
  }
}
```