```java
package org.apache.hadoop.yarn.sls.scheduler;

public class TestTaskRunner {
  private TaskRunner runner;
  
  @Before
  public void setUp() {
    runner = new TaskRunner();
    runner.setQueueSize(5);
    SingleTask.reset();
    DualTask.reset();
    TriTask.reset();
    MultiTask.reset();
    PreStartTask.reset();
  }

  @After
  public void cleanUp() throws InterruptedException {
    runner.stop();
  }

  public static class SingleTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;

    public static void reset() {
      latch = new CountDownLatch(1);
      first = false;
    }

    public SingleTask(long startTime) {
      super.init(startTime);
    }

    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
      latch.countDown();
    }

    @Override
    public void middleStep() {
      Assert.fail();
    }

    @Override
    public void lastStep() {
      Assert.fail();
    }
  }

  public static class DualTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static boolean last;

    public static void reset() {
      latch = new CountDownLatch(1);
      first = false;
      last = false;
    }

    public DualTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }

    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }

    @Override
    public void middleStep() {
      Assert.fail();
    }

    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }

  public static class TriTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static boolean middle;
    public static boolean last;

    public static void reset() {
      latch = new CountDownLatch(1);
      first = false;
      middle = false;
      last = false;
    }

    public TriTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }

    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }

    @Override
    public void middleStep() {
      if (middle) {
        Assert.fail();
      }
      middle = true;
    }

    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }
  
  public static class MultiTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;
    public static int middle;
    public static boolean last;

    public static void reset() {
      latch = new CountDownLatch(1);
      first = false;
      middle = 0;
      last = false;
    }

    public MultiTask(long startTime, long endTime, long interval) {
      super.init(startTime, endTime, interval);
    }

    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
    }

    @Override
    public void middleStep() {
      middle++;
    }

    @Override
    public void lastStep() {
      if (last) {
        Assert.fail();
      }
      last = true;
      latch.countDown();
    }
  }

  public static class PreStartTask extends TaskRunner.Task {
    public static CountDownLatch latch;
    public static boolean first;

    public static void reset() {
      latch = new CountDownLatch(1);
      first = false;
    }

    public PreStartTask(long startTime) {
      super.init(startTime);
    }

    @Override
    public void firstStep() {
      if (first) {
        Assert.fail();
      }
      first = true;
      latch.countDown();
    }

    @Override
    public void middleStep() {
    }

    @Override
    public void lastStep() {
    }
  }
} 
```